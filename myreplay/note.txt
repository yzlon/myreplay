配置activeMQ
	建立真正的JMS服务商提供的ConnectionFactory
	建立spring的ConnectionFactory来管理jms服务商提供的真正的ConnecitonFactory
	建立spring的工具类JmsTemplate,它可以进行消息发送、接收
	建立消息传输的目的地址MQQUEUE destination
	建立生产者
	建立消费者

mybatis-spring配置：
SqlSessionFactoryBean  
	在基本的 MyBatis 中,session 工厂可以使用 SqlSessionFactoryBuilder 来创建。
	而在 MyBatis-Spring 中,则使用 SqlSessionFactoryBean 来替代。 
	属性：
		dataSource（必须的属性）
			例如：<property name="dataSource" ref="dataSource" />
		configLocation:指定mybatis的xml配置
			例如：<property name="configLocation" value="classpath:conf/mybatis-config.xml"/>
		mapperLocations：指定mybatis的xml映射器的位置
			例如：<property name="mapperLocations" value="classpath*:sample/config/mappers/**/*.xml" />
		transactionFactory:事务管理器
	配置：
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <property name="dataSource" ref="dataSource" />
	    <property name="configLocation" value="classpath:conf/mybatis-config.xml"/>
	    <property name="mapperLocations" value="classpath*:sample/config/mappers/**/*.xml" />
	</bean>
SqlSession
	在 MyBatis 中,你可以使用 SqlSessionFactory 来创建 SqlSession。一旦你获得一个 session 之后,你可以使用它来执行映射语句,提交或回滚连接,最后,当不再需要它的时 候, 你可以关闭 session。 
	使用 MyBatis-Spring 之后, 你不再需要直接使用 SqlSessionFactory 了,因为你的 bean 可以通过一个线程安全的 SqlSession 来注入,基于 Spring 的事务配置 来自动提交,回滚,关闭 session。
SqlSessionTemplate 
	SqlSessionTemplate 是 MyBatis-Spring 的核心。 这个类负责管理 MyBatis 的 SqlSession, 调用 MyBatis 的 SQL 方法, 翻译异常。 
	SqlSessionTemplate 是线程安全的, 可以被多个 DAO 所共享使用。
	配置：
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	    <constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
配置mybatis的时候：	
	<typeAliases>
	<!--		<package name="com.yzl.db.*" /> 这种写法是错误的！！！-->
		<package name="com.yzl.db" />
	</typeAliases>
	
	
StringBuilder与 StringBuffer
	StringBuilder：线程非安全的
	StringBuffer：线程安全的
	
Stack 继承于Vector 所以也是线程安全的，当栈为空的时候要跑出EmptyStackException异常
当用HashMap作为存放查询条件的参数传递给mapper的时候可以建立一个 HashMap<String,Object>类型的变量，这样value就可以存放任意类型的值了。

mybatis的mapper中 #{} 和${} 的区别是，#{value}对字符串会变成 'value' 而$不会,所以 order by ${value} 后的参数 要用$传递